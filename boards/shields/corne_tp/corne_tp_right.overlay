#include <dt-bindings/zmk/matrix_transform.h> // Put this with the other includes at the top of your overlay

/ {
    chosen {
        zmk,kscan = &kscan0;
        zmk,matrix_transform = &default_transform;
    };

    // --- NEW: direct-wired keys (P0.18 and P0.19 to GND, use pull-ups) ---
    kscan_direct: kscan_direct {
        compatible = "zmk,kscan-gpio-direct";
        wakeup-source;
        input-gpios =
            <&gpio0 18 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>,  // FN_KEY
            <&gpio0 19 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;  // POWER_KEY
        debounce-press-ms = <5>;
        debounce-release-ms = <5>;
    };

    kscan0: kscan_composite {
        compatible = "zmk,kscan-composite";
        wakeup-source;

        // Keep the same 16 columns; add one more row (new row index = 8)
        rows = <9>;      // was 8
        columns = <16>;  // unchanged

        // Include the existing matrix (unchanged)
        matrix {
            kscan = <&default_kscan>;
        };

        // Place the two direct pins on the new bottom row (row 8), columns 0 and 1
        direct {
            kscan = <&kscan_direct>;
            row-offset = <8>;
            col-offset = <0>;
        };
    };


    default_kscan: kscan {
        compatible = "zmk,kscan-gpio-matrix";
        label = "default_kscan";
        diode-direction = "row2col";
        wakeup-source;

        col-gpios
            = <&gpio0 5 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>   // DRV0 - P0.05
            , <&gpio0 30 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>  // DRV1 - P0.30
            , <&gpio0 29 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>  // DRV2 - P0.29
            , <&gpio1 0 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>   // DRV3 - P1.00
            , <&gpio0 20 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>  // DRV4 - P0.20
            , <&gpio0 17 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>  // DRV5 - P0.17
            , <&gpio0 22 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>  // DRV6 - P0.22
            , <&gpio0 2 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>   // DRV7 - P0.02
            , <&gpio0 15 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>  // DRV8 - P0.15
            , <&gpio1 9 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>   // DRV9 - P1.09
            , <&gpio0 31 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>  // DRV10 - P0.31
            , <&gpio0 1 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>   // DRV11 - P0.01
            , <&gpio0 8 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>   // DRV12 - P0.08
            , <&gpio0 26 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>  // DRV13 - P0.26
            , <&gpio0 0 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>   // DRV14 - P0.00
            , <&gpio0 6 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>   // DRV15 - P0.06
            ;

        row-gpios
            = <&gpio1 4 GPIO_ACTIVE_HIGH>   // SENSE0 - P1.04
            , <&gpio0 4 GPIO_ACTIVE_HIGH>   // SENSE1 - P0.04
            , <&gpio0 7 GPIO_ACTIVE_HIGH>   // SENSE2 - P0.07
            , <&gpio1 2 GPIO_ACTIVE_HIGH>   // SENSE3 - P1.02
            , <&gpio0 12 GPIO_ACTIVE_HIGH>  // SENSE4 - P0.12
            , <&gpio1 6 GPIO_ACTIVE_HIGH>   // SENSE5 - P1.06
            , <&gpio1 13 GPIO_ACTIVE_HIGH>  // SENSE6 - P1.13
            , <&gpio0 28 GPIO_ACTIVE_HIGH>  // SENSE7 - P0.28
            ;
    };

    default_transform: keymap_transform0 {
        compatible = "zmk,matrix-transform";
        columns = <16>; // Length of the "col-gpios" array (DRV0-DRV15)
        rows = <9>; // Length of the "row-gpios" array (SENSE0-SENSE7)
        map = <
        // Row 0: Back-Tick, F1, F2, 5, 6, Equal, F8, Minus, F9, Insert, Delete, Page-Up, Home, , , Ctrl-L
            RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(0,6) RC(0,7) RC(0,8) RC(0,9) RC(0,10) RC(0,11) RC(0,12)                  RC(0,15)
        // Row 1: 1, 2, 3, 4, 7, 8, 9, 0, F10, F12, F11, Page-Down, End, Print-Screen, , 
            RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10) RC(1,11) RC(1,12) RC(1,13)
        // Row 2: Q, W, E, R, U, I, O, P, , , VolumeUp, GUI, , ScrollLock, , 
            RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(2,6) RC(2,7)          RC(2,10) RC(2,11)    RC(2,13)
        // Row 3: Tab, CapsLock, F3, T, Y, Right-Brace, F7, Left-Brace, Back-Space, , VolumeDown, , , , Shift-L, 
            RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(3,5) RC(3,6) RC(3,7) RC(3,8)    RC(3,10)              RC(3,14)
        // Row 4: A, S, D, F, J, K, L, Semi-colon, Back-Slash, Fn, Mute, Menu, , , , 
            RC(4,0) RC(4,1) RC(4,2) RC(4,3) RC(4,4) RC(4,5) RC(4,6) RC(4,7) RC(4,8) RC(4,9) RC(4,10) RC(4,11)
        // Row 5: Esc, , F4, G, H, F6, , Quote, F5, , Think-Vantage, , Arrow-Up, Alt-L, , 
            RC(5,0)    RC(5,2) RC(5,3) RC(5,4) RC(5,5)    RC(5,7) RC(5,8)    RC(5,10)    RC(5,12) RC(5,13)
        // Row 6: Z, X, C, V, M, Comma, Period, Forward-Slash, Enter, , , PageLeft, Pause, , Shift-R, Ctrl-R
            RC(6,0) RC(6,1) RC(6,2) RC(6,3) RC(6,4) RC(6,5) RC(6,6) RC(6,7) RC(6,8)       RC(6,11) RC(6,12)    RC(6,14) RC(6,15)
        // Row 7: , , , B, N, , , Forward-Slash, Space, Arrow-Right, ArrowDown, Page-Right, Arrow-Left, Alt-R, , 
                     RC(7,3) RC(7,4)       RC(7,7) RC(7,8) RC(7,9) RC(7,10) RC(7,11) RC(7,12) RC(7,13)
        // Row 8 (NEW): FN_KEY, POWER_KEY
        RC(8,0) RC(8,1)
        >;
    };
};

/* Force P0.09 high at boot to power the PS/2 device */
&gpio0 {
    ps2_vdd: ps2_vdd_hog {
        gpio-hog;
        gpios = <9 GPIO_ACTIVE_HIGH>;  /* Port 0, Pin 9 = P0.09 */
        output-high;                   /* drive high immediately at boot */
        /* no 'label' here */
    };
};

/* Use UART-based PS/2 driver (faster, recommended) */
#define MOUSE_PS2_DRIVER_UART

/* Your wiring:
 * DATA -> P1.10 (also used as UART RX)
 * CLK  -> P0.03
 */

/* GPIO pins for the PS/2 lines */
#define MOUSE_PS2_PIN_SCL_PRO_MICRO <&gpio0 3 GPIO_ACTIVE_HIGH>     /* P0.03 */
#define MOUSE_PS2_PIN_SDA_PRO_MICRO <&gpio1 10 GPIO_ACTIVE_HIGH>    /* P1.10 */
/* Map the DATA line to the nRF UART RX (port 1, pin 10) */
#define MOUSE_PS2_PIN_SDA_PINCTRL <NRF_PSEL(UART_RX, 1, 10)>
#define MOUSE_PS2_UART_BAUD_RATE <14400>

/*
 * PS/2 Mouse / Trackpoint - User Configuration if NOT using nice!nano
 *
 * WARNING: Do NOT change this if you are using a nice!nano v2 or clone.
 */

// Unexposed UART pins
// In UART two different pins are used for receiving and transmitting, but PS/2
// uses the same pin for both.
//
// The UART config still requires both pins to be configured. So we use one of
// the nrf52 pins that are not exposed on the nice!nano board.
//
// Do NOT change these if you are using a nice!nano (or a clone of it)
#define MOUSE_PS2_PIN_UNEXPOSED_TX <NRF_PSEL(UART_TX, 0, 27)>
#define MOUSE_PS2_PIN_UNEXPOSED_RX <NRF_PSEL(UART_RX, 1, 8)>


// Adjust GPIO interrupt priority to the highest level.
//
// IMPORTANT TLDR:
// If you are using the nice_nano_v2 board, you don't need to make changes to
// the config below and can leave it as it is.
//
// Explanation of these settings:
//
// PS/2 events must be processed within 30-50us, but frequently bluetooth and
// other interrupts take longer to finish.
//
// Therefore we change the default GPIO priority to the highest level (0) and
// demote all BT interrupt priorities by one level using the kconfig settings:
// - CONFIG_BT_CTLR_LLL_PRIO 1
// - CONFIG_BT_CTLR_ULL_HIGH_PRIO 2
// - CONFIG_BT_CTLR_ULL_LOW_PRIOCONFIG 2
//
// These config options are enabled automatically by the PS2 UART and GPIO
// drivers... so you don't have to enable them manually.
//
// Then we lower the interrupt priority of all other devices by 2 levels using
// the devicetree config below.
//
// This allows the PS/2 interrupts to be triggered faster and reduces
// transmission errors.
//
// If you are using the nice_nano_v2 board, you can reuse my config below.
//
// Otherwise, you can generate the interrupt overrides using this script:
// https://github.com/infused-kim/kb_zmk_ps2_mouse_trackpoint_driver/blob/main/scripts/gen_interrupt_priority_overrides.py
//
// Make sure to do it on a zephyr.dts where the interrupts have not been
// adjusted yet (i.e. a config that doesn't have the the following options
// enabled).
//
// If you are building using a toolchain you can find the zephyr.dts in the
// build directory, which by default is: `app/build/zephyr/zephyr.dts`
//
// If you are building using the github actions, copy the output of the build
// step `xxxx_right - nice_nano_v2 Devicetree file` into a file and run the
// script on it.

// gpiote should have the highest interrupt priority (0)
&gpiote {
    interrupts = < 6 0 >;
};

// All other priorities should be two levels lower than their defaults
// (which is usually 1 and should be demoted to 3)
&clock {
    interrupts = < 0 3 >;
};

&power {
    interrupts = < 0 3 >;
};

&radio {
    interrupts = < 1 3 >;
};

&uart0 {
    interrupts = < 2 3 >;
};

&i2c0 {
    interrupts = < 3 3 >;
};

&spi0 {
    interrupts = < 3 3 >;
};

&i2c1 {
    interrupts = < 4 3 >;
};

&spi1 {
    interrupts = < 4 3 >;
};

&nfct {
    interrupts = < 5 3 >;
};

&adc {
    interrupts = < 7 3 >;
};

&timer0 {
    interrupts = < 8 3 >;
};

&timer1 {
    interrupts = < 9 3 >;
};

&timer2 {
    interrupts = < 10 3 >;
};

&rtc0 {
    interrupts = < 11 3 >;
};

&temp {
    interrupts = < 12 3 >;
};

&rng {
    interrupts = < 13 3 >;
};

&ecb {
    interrupts = < 14 3 >;
};

&ccm {
    interrupts = < 15 3 >;
};

&wdt {
    interrupts = < 16 3 >;
};

&rtc1 {
    interrupts = < 17 3 >;
};

&qdec {
    interrupts = < 18 3 >;
};

&comp {
    interrupts = < 19 3 >;
};

&egu0 {
    interrupts = < 20 3 >;
};

&egu1 {
    interrupts = < 21 3 >;
};

&egu2 {
    interrupts = < 22 3 >;
};

&egu3 {
    interrupts = < 23 3 >;
};

&egu4 {
    interrupts = < 24 3 >;
};

&egu5 {
    interrupts = < 25 3 >;
};

&timer3 {
    interrupts = < 26 3 >;
};

&timer4 {
    interrupts = < 27 3 >;
};

&pwm0 {
    interrupts = < 28 3 >;
};

&pdm0 {
    interrupts = < 29 3 >;
};

&pwm1 {
    interrupts = < 33 3 >;
};

&pwm2 {
    interrupts = < 34 3 >;
};

&spi2 {
    interrupts = < 35 3 >;
};

&rtc2 {
    interrupts = < 36 3 >;
};

&i2s0 {
    interrupts = < 37 3 >;
};

&usbd {
    interrupts = < 39 3 >;
};

&uart1 {
    interrupts = < 40 3 >;
};

&qspi {
    interrupts = < 41 3 >;
};

&pwm3 {
    interrupts = < 45 3 >;
};

&spi3 {
    interrupts = < 47 3 >;
};

&cryptocell {
    interrupts = < 42 3 >;
};


/*
 * PS/2 Mouse / Trackpoint - Device Definitions
 *
 * WARNING: Do not change anything beyond here unless you know what you are
 *          doing.
 */


// Firmware with alternative pins
//
// This can safely be removed. It's only used in the example zmk-config repo
// to create an additional firmware with alternative PIN assignments.
//
// You can leave it or remove in your own zmk config. If you remove it, you
// should also remove the entry in `zmk-config-example/build.yaml` that uses
// it.
#ifdef MOUSE_PS2_ALT_PINS
    #undef MOUSE_PS2_PIN_SCL_PRO_MICRO
    #undef MOUSE_PS2_PIN_SDA_PRO_MICRO
    #undef MOUSE_PS2_PIN_SDA_PINCTRL

    #define MOUSE_PS2_PIN_SCL_PRO_MICRO <&pro_micro 1 GPIO_ACTIVE_HIGH>
    #define MOUSE_PS2_PIN_SDA_PRO_MICRO <&pro_micro 0 GPIO_ACTIVE_HIGH>
    #define MOUSE_PS2_PIN_SDA_PINCTRL <NRF_PSEL(UART_RX, 0, 8)>
#endif

// This define can be used in the keymap file to check whether the device tree
// configs in this file are present to void build errors on the side that does
// not have the mouse or TP
#define MOUSE_PS2_DT_PRESENT

&pinctrl {
	// This pinctrl state is used for receiving
	// For `UART_TX`, set an unused and unexposed pin
	// For `UART_RX`, set the PS/2 SDA pin number
	uart0_ps2_default: uart0_ps2_default {
		group1 {
			psels = MOUSE_PS2_PIN_UNEXPOSED_TX,
					MOUSE_PS2_PIN_SDA_PINCTRL;
		};
	};

	// Set this to the same pins as uart0_ps2_default
	uart0_ps2_sleep: uart0_ps2_sleep {
		group1 {
			psels = MOUSE_PS2_PIN_UNEXPOSED_TX,
					MOUSE_PS2_PIN_SDA_PINCTRL;
			low-power-enable;
		};
	};

	// The nrf52 UART controller is not compatible with the PS/2
	// transmission frame. So the PS/2 UART driver doesn't use UART for
	// transmissions and instead use GPIO bit-banging.
	//
	// When the driver switches to transmit mode, it frees up the SDA pin by
    // switching the UART controller to unexposed/unused pins.
	//
	// Then it configures the GPIO controller to use the SCL and SDA pins
	uart0_ps2_off: uart0_ps2_off {
		group1 {
			psels = MOUSE_PS2_PIN_UNEXPOSED_TX,
					MOUSE_PS2_PIN_UNEXPOSED_RX;
		};
	};
};


#ifdef MOUSE_PS2_DRIVER_UART

    &uart0 {
        status = "disabled";
        compatible = "nordic,nrf-uarte";

        current-speed = MOUSE_PS2_UART_BAUD_RATE;
        pinctrl-0 = <&uart0_ps2_default>;
        pinctrl-1 = <&uart0_ps2_off>;

        pinctrl-names = "default", "sleep";

        uart_ps2: uart_ps2 {
            status="disabled";
            compatible = "uart-ps2";
            scl-gpios = MOUSE_PS2_PIN_SCL_PRO_MICRO;
            sda-gpios = MOUSE_PS2_PIN_SDA_PRO_MICRO;
        };
    };

#else

    / {
        gpio_ps2: gpio_ps2 {
            status = "disabled";

            compatible = "gpio-ps2";
            scl-gpios = MOUSE_PS2_PIN_SCL_PRO_MICRO;
            sda-gpios = MOUSE_PS2_PIN_SDA_PRO_MICRO;
        };
    };

#endif


/ {
    mouse_ps2: mouse_ps2 {
		status = "disabled";
        compatible = "zmk,input-mouse-ps2";

#ifdef MOUSE_PS2_DRIVER_UART
	    ps2-device = <&uart_ps2>;
#else
	    ps2-device = <&gpio_ps2>;
#endif

#ifdef MOUSE_PS2_PIN_RST_PRO_MICRO
        rst-gpios = MOUSE_PS2_PIN_RST_PRO_MICRO;
#endif
    };

    mouse_ps2_input_listener: mouse_ps2_input_listener {
        compatible = "zmk,input-listener-ps2";
        status = "disabled";

        device = <&mouse_ps2>;

		// Some of the available settings depend on the keymap. So they
		// are adjusted in...
		// zmk-config/config/includes/mouse_tp.dtsi
    };
};

/* (Optional) If you have a TrackPoint reset wire, pick any spare pin:
 * #define MOUSE_PS2_PIN_RESET <&gpio0 9 GPIO_ACTIVE_HIGH>
 */

